<?php


namespace PriceListTest\Services;


use CatalogManagement\Entity\CatalogEntity;
use CatalogManagement\Entity\CatalogProductEntity;
use CatalogManagement\Enum\CatalogCurrencies;
use CatalogManagement\Enum\CatalogProductTypes;
use CatalogManagement\Enum\CatalogStatuses;
use PriceList\Entity\PriceListEntity;
use PriceList\Entity\PriceListProductEntity;
use PriceList\Enum\PriceListStatuses;
use PriceList\Enum\PriceListTypes;
use PriceList\Service\PriceListAssignment;
use Product\GeneralProducts\Entity\GeneralProductEntity;
use Runple\Modules\Product\Family\Entity\ProductFamilyEntity;
use Runple\Modules\Product\Family\Enum\FamilyStatuses;
use TestHelper\TestHelper;

class PriceListAssignmentTest extends TestHelper
{
    /** @var PriceListAssignment */
    protected $assignmentService;

    /** @var GeneralProductEntity[] */
    protected $arrGProduct;

    /**
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->assignmentService = $this->serviceManager->get(PriceListAssignment::class);
        $this->arrGProduct = $this->createGeneralProduct();
    }

    /**
     * @throws \Common\Exceptions\CommonException
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     * @throws \Runple\Devtools\Exception\CommonException
     */
    public function testAssignCatalogsToPriceList()
    {
        $priceListEntity = $this->createPriceList();
        $catalog = $this->createCatalogs();
        $catalogs = [$catalog];

        $priceList =  $this->assignmentService->assignCatalogsToPriceList($priceListEntity, $catalogs);
        $this->assertInstanceOf(PriceListEntity::class, $priceList);
        $pLCatalogs = $priceList->getCatalogs()->toArray();
    }

    /**
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    private function createCatalogs()
    {
        $catalog = new CatalogEntity();
        $catalog->setTitle('Catalog Assign');
        $catalog->setDescription('Catalog Assign description');
        $catalog->setStatus(CatalogStatuses::PUBLISHED);
        $catalog->setCurrency(CatalogCurrencies::USD);
        $catalog->setAccessCode('testToken3223648');
        $this->em->persist($catalog);
        $this->em->flush();
        $this->em->refresh($catalog);

        $this->createCatalogProduct($catalog);
        return $catalog;
    }

    /**
     * @param CatalogEntity $catalog
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    private function createCatalogProduct(CatalogEntity $catalog)
    {
        $arrGProduct = $this->arrGProduct;

        $catalogProduct1 = new CatalogProductEntity();
        $catalogProduct1->setGeneralGood($arrGProduct[0]);
        $catalogProduct1->setCatalog($catalog);
        $catalogProduct1->setType(CatalogProductTypes::VISIBLE);
        $catalogProduct1->setCatalogGoodPrice(1);
        $this->em->persist($catalogProduct1);
        $this->em->flush();
        $this->em->refresh($catalogProduct1);

        $catalogProduct2 = new CatalogProductEntity();
        $catalogProduct2->setGeneralGood($arrGProduct[1]);
        $catalogProduct2->setCatalog($catalog);
        $catalogProduct2->setType(CatalogProductTypes::VISIBLE);
        $catalogProduct2->setCatalogGoodPrice(2);
        $this->em->persist($catalogProduct2);
        $this->em->flush();
        $this->em->refresh($catalogProduct2);
    }
    /**
     * @return \PriceList\Entity\PriceListEntity
     * @throws \Common\Exceptions\CommonException
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     * @throws \Runple\Devtools\Exception\CommonException
     */
    private function createPriceList()
    {
        $priceListEntity = new PriceListEntity();
        $priceListEntity->setTitle('Price List Assign');
        $priceListEntity->setDescription('Price List Assign description');
        $priceListEntity->setStatus(PriceListStatuses::ACTIVE);
        $priceListEntity->setType(PriceListTypes::OPL);
        $this->em->persist($priceListEntity);
        $this->em->flush();
        $this->em->refresh($priceListEntity);
        $this->createPriceListProduct($priceListEntity);

        return $priceListEntity;
    }

    /**
     * @param PriceListEntity $priceListEntity
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    private function createPriceListProduct(PriceListEntity $priceListEntity)
    {
        $arrGProduct = $this->arrGProduct;

        $priceListProductEntity1 = new PriceListProductEntity();
        $priceListProductEntity1->setGeneralGood($arrGProduct[0]);
        $priceListProductEntity1->setPrice(11);
        $priceListProductEntity1->setPriceList($priceListEntity);
        $this->em->persist($priceListProductEntity1);
        $this->em->flush();
        $this->em->refresh($priceListProductEntity1);

        $priceListProductEntity2 = new PriceListProductEntity();
        $priceListProductEntity2->setGeneralGood($arrGProduct[1]);
        $priceListProductEntity2->setPrice(22);
        $priceListProductEntity2->setPriceList($priceListEntity);
        $this->em->persist($priceListProductEntity2);
        $this->em->flush();
        $this->em->refresh($priceListProductEntity2);
    }

    /**
     * @return GeneralProductEntity[]
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
//    private function createGeneralProduct()
//    {
//        $family1 = new ProductFamilyEntity();
//        $family1->setTitle('Family 1');
//        $family1->setStatus(FamilyStatuses::STATUS_ACTIVE);
//        $this->em->persist($family1);
//        $this->em->flush();
//        $this->em->refresh($family1);
//
//        $family2 = new ProductFamilyEntity();
//        $family2->setTitle('Family 2');
//        $family2->setStatus(FamilyStatuses::STATUS_ACTIVE);
//        $this->em->persist($family2);
//        $this->em->flush();
//        $this->em->refresh($family2);
//
//        $gProduct1 = new GeneralProductEntity();
//        $gProduct1->setFamily($family1);
//        $this->em->persist($gProduct1);
//        $this->em->flush();
//        $this->em->refresh($gProduct1);
//
//        $gProduct2 = new GeneralProductEntity();
//        $gProduct2->setFamily($family2);
//        $this->em->persist($gProduct2);
//        $this->em->flush();
//        $this->em->refresh($gProduct2);
//
//        return [$gProduct1, $gProduct2];
//    }
}
