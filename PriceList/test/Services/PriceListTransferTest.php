<?php

use CatalogManagement\Entity\CatalogEntity;
use CatalogManagement\Entity\CatalogGoodsEntity;
use CatalogManagement\Enum\CatalogCurrencies;
use CatalogManagement\Enum\CatalogGoodTypes;
use CatalogManagement\Enum\CatalogStatuses;
use PriceList\Entity\PriceListEntity;
use PriceList\Entity\PriceListGoodsEntity;
use PriceList\Enum\PriceListStatuses;
use PriceList\Enum\PriceListTypes;
use Product\Entity\GeneralGoodEntity;
use Runple\Modules\Product\Family\Entity\ProductFamilyEntity;
use Runple\Modules\Product\Family\Enum\FamilyStatuses;
use TestHelper\TestHelper;
use PriceList\Service\PriceListTransfer;


/**
 * Class PriceListTransferTest
 */
class PriceListTransferTest extends TestHelper
{
    /** @var PriceListTransfer */
    protected $transferService;

    /** @var GeneralGoodEntity[] */
    protected $arrGGoods;

    /**
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->transferService = $this->serviceManager->get(PriceListTransfer::class);
        $this->arrGGoods = $this->createGeneralGoods();
    }

    /**
     * @throws \Common\Exceptions\CommonException
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     * @throws \Runple\Devtools\Exception\CommonException
     */
    public function testTransfer()
    {
        $priceList = $this->createPriceList();
        $priceListGoods = $priceList->getPriceListGoods()->toArray();
        $catalog = $this->createCatalogs();
        $catalogs = [$catalog];

        $updatedCatalogs = $this->transferService->transfer($priceListGoods, $catalogs);
        foreach ($updatedCatalogs as $updatedCatalog) {
            $this->assertInstanceOf(CatalogEntity::class, $updatedCatalog);
        }
    }
    /**
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    private function createCatalogs()
    {
        $catalog = new CatalogEntity();
        $catalog->setTitle('Catalog Assign');
        $catalog->setDescription('Catalog Assign description');
        $catalog->setStatus(CatalogStatuses::PUBLISHED);
        $catalog->setCurrency(CatalogCurrencies::USD);
        $catalog->setAccessCode('testToken3223648');
        $this->em->persist($catalog);
        $this->em->flush();
        $this->em->refresh($catalog);

        $this->createCatalogGoods($catalog);
        return $catalog;
    }

    /**
     * @param CatalogEntity $catalog
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    private function createCatalogGoods(CatalogEntity $catalog)
    {
        $arrGGoods = $this->arrGGoods;

        $catalogGoods1 = new CatalogGoodsEntity();
        $catalogGoods1->setGeneralGood($arrGGoods[0]);
        $catalogGoods1->setCatalog($catalog);
        $catalogGoods1->setType(CatalogGoodTypes::VISIBLE);
        $catalogGoods1->setCatalogGoodPrice(1);
        $this->em->persist($catalogGoods1);
        $this->em->flush();
        $this->em->refresh($catalogGoods1);

        $catalogGoods2 = new CatalogGoodsEntity();
        $catalogGoods2->setGeneralGood($arrGGoods[1]);
        $catalogGoods2->setCatalog($catalog);
        $catalogGoods2->setType(CatalogGoodTypes::VISIBLE);
        $catalogGoods2->setCatalogGoodPrice(2);
        $this->em->persist($catalogGoods2);
        $this->em->flush();
        $this->em->refresh($catalogGoods2);
    }
    /**
     * @return \PriceList\Entity\PriceListEntity
     * @throws \Common\Exceptions\CommonException
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     * @throws \Runple\Devtools\Exception\CommonException
     */
    private function createPriceList()
    {
        $priceListEntity = new PriceListEntity();
        $priceListEntity->setTitle('Price List Assign');
        $priceListEntity->setDescription('Price List Assign description');
        $priceListEntity->setStatus(PriceListStatuses::ACTIVE);
        $priceListEntity->setType(PriceListTypes::OPL);
        $this->em->persist($priceListEntity);
        $this->em->flush();
        $this->em->refresh($priceListEntity);
        $this->createPriceListGoods($priceListEntity);

        return $priceListEntity;
    }

    /**
     * @param PriceListEntity $priceListEntity
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    private function createPriceListGoods(PriceListEntity $priceListEntity)
    {
        $arrGGoods = $this->arrGGoods;

        $priceListProductEntity1 = new PriceListGoodsEntity();
        $priceListProductEntity1->setGeneralGood($arrGGoods[0]);
        $priceListProductEntity1->setPrice(11);
        $priceListProductEntity1->setPriceList($priceListEntity);
        $this->em->persist($priceListProductEntity1);
        $this->em->flush();
        $this->em->refresh($priceListProductEntity1);

        $priceListProductEntity2 = new PriceListGoodsEntity();
        $priceListProductEntity2->setGeneralGood($arrGGoods[1]);
        $priceListProductEntity2->setPrice(22);
        $priceListProductEntity2->setPriceList($priceListEntity);
        $this->em->persist($priceListProductEntity2);
        $this->em->flush();
        $this->em->refresh($priceListProductEntity2);
    }

    /**
     * @return GeneralGoodEntity[]
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    private function createGeneralGoods()
    {
        $family1 = new ProductFamilyEntity();
        $family1->setTitle('Family 1');
        $family1->setStatus(FamilyStatuses::STATUS_ACTIVE);
        $this->em->persist($family1);
        $this->em->flush();
        $this->em->refresh($family1);

        $family2 = new ProductFamilyEntity();
        $family2->setTitle('Family 2');
        $family2->setStatus(FamilyStatuses::STATUS_ACTIVE);
        $this->em->persist($family2);
        $this->em->flush();
        $this->em->refresh($family2);

        $gGoods1 = new GeneralGoodEntity();
        $gGoods1->setFamily($family1);
        $this->em->persist($gGoods1);
        $this->em->flush();
        $this->em->refresh($gGoods1);

        $gGoods2 = new GeneralGoodEntity();
        $gGoods2->setFamily($family2);
        $this->em->persist($gGoods2);
        $this->em->flush();
        $this->em->refresh($gGoods2);

        return [$gGoods1, $gGoods2];
    }
}