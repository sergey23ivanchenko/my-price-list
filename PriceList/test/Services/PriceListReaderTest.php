<?php

use Doctrine\Common\Collections\Collection;
use PriceList\Entity\PriceListEntity;
use PriceList\Enum\PriceListStatuses;
use PriceList\Enum\PriceListTypes;
use PriceList\Service\PriceListReader;
use Runple\Modules\File\Entity\ImageEntity;
use TestHelper\TestHelper;

class PriceListReaderTest extends TestHelper
{
    /** @var PriceListReader*/
    protected $priceListReader;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->priceListReader = $this->serviceManager->get(PriceListReader::class);
    }

    /**
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function testGetPriceListByIdSuccess()
    {
        $title = 'Price list with a image';
        $description = 'Price list with a image';

        $priceListEntity = $this->createPriceList($title, $description);
        /** @var $priceList PriceListEntity */
        $priceList = $this->priceListReader->getPriceListById($priceListEntity->getId());
        $this->assertInstanceOf(PriceListEntity::class, $priceList);
        $this->assertSame($title, $priceList->getTitle());
        $this->assertSame($description, $priceList->getDescription());
    }
    /**
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function testGetPriceListByIdsSuccess()
    {
        $ids = [];
        for ($i=1; $i<=3; $i++) {
            $title = 'Price list'.$i;
            $description = 'Price list with a image'.$i;

            $priceListEntity = $this->createPriceList($title, $description);
            $ids[] = $priceListEntity->getId();
        }

        /** @var $priceLists PriceListEntity[] */
        $priceLists = $this->priceListReader->getPriceListByIds($ids);
        $this->assertEquals(count($ids), count($priceLists));
        foreach ($priceLists as $priceList) {
            $this->assertInstanceOf(PriceListEntity::class, $priceList);
        }
    }
    /**
     * @param string $title
     * @param string|null $description
     * @param ImageEntity|null $image
     * @param Collection|null $priceListProducts
     * @return PriceListEntity
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    private function createPriceList(string $title, string $description = null, ImageEntity $image  = null, Collection $priceListProducts = null)
    {
        $priceList = new PriceListEntity();
        $priceList->setTitle($title);
        $priceList->setDescription($description);
        $priceList->setImage($image);
        $priceList->setStatus(PriceListStatuses::ACTIVE);
        $priceList->setType(PriceListTypes::OPL);
        $priceList->setPriceListProduct($priceListProducts);
        $this->em->persist($priceList);
        $this->em->flush();
        $this->em->refresh($priceList);

        return $priceList;
    }
}