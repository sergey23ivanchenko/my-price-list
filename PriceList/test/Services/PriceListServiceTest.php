<?php

use Doctrine\Common\Collections\Collection;
use PriceList\Enum\PriceListStatuses;
use PriceList\Enum\PriceListTypes;
use Runple\Devtools\Exception\CommonException;
use PriceList\Entity\PriceListEntity;
use PriceList\Model\PriceListProductModel;
use Runple\Modules\Product\Family\Enum\FamilyStatuses;
use TestHelper\TestHelper;
use PriceList\Service\PriceListService;
use PriceList\Model\PriceListModel;
use File\Model\ImageModel;
use Runple\Modules\File\Entity\ImageEntity;
use Product\GeneralProducts\Entity\GeneralProductEntity;
use Runple\Modules\Product\Family\Entity\ProductFamilyEntity;

/**
 * Class PriceListServiceTest
 */
class PriceListServiceTest extends TestHelper
{

    /** @var PriceListService  */
    protected $priceListService;
    /**
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->priceListService = $this->serviceManager->get(PriceListService::class);
    }

    /**
     * @return array
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function dataSet()
    {
        $image = new ImageModel();
        $image->setId(9999);

        $priceListProductModel1 = new PriceListProductModel();
        $priceListProductModel1->setId(999999);
        $priceListProductModel2 = new PriceListProductModel();
        $priceListProductModel2->setId(999999999);

        $priceListProductModel1 = new PriceListProductModel();
        $priceListProductModel1->setProduct($priceListProductModel1);
        $priceListProductModel1->setPrice(5);
        $priceListProductModel2 = new PriceListProductModel();
        $priceListProductModel2->setProduct($priceListProductModel2);
        $priceListProductModel2->setPrice(11);

        $arrPLProduct = [$priceListProductModel1, $priceListProductModel2];
        return [
            'create price list only title' =>
                [
                    $this->createPriceListModel('Price List 1', null),
                    [
                        'title' => 'Price List 1',
                        'description' => null
                    ]
                ],
            'create price list, title and description' =>
                [
                    $this->createPriceListModel('Price List 2', 'Price List Description'),
                    [
                        'title' => 'Price List 2',
                        'description' => 'Price List Description'
                    ]
                ],
            'Price List nonexistent image' =>
                [
                    $this->createPriceListModel('Price List', null, $image),
                    [
                        'title' => 'Price List 1',
                        'description' => null,
                        'image' => $image
                    ],
                    true
                ],
        'Price List nonexistent general product' =>
                [
                    $this->createPriceListModel('Price List', null, null, $arrPLProduct),
                    [
                        'title' => 'Price List 1',
                        'description' => null,
                        'image' => null,
                        'priceListProducts' => $arrPLProduct
                    ],
                    true
                ]
        ];
    }

    /**
     * @dataProvider dataSet
     * @param PriceListModel $priceListModel
     * @param $expectedParams
     * @param bool $hasError
     * @throws \Common\Exceptions\CommonException
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     * @throws \Runple\Devtools\Exception\CommonException
     */
    public function testCreateOutgoingPriceList(PriceListModel $priceListModel, $expectedParams, $hasError = false)
    {
        if ($hasError) {
            $this->expectException(CommonException::class);
        }
        $priceList = $this->priceListService->createOutgoingPriceList($priceListModel);
        $this->assertInstanceOf(PriceListEntity::class, $priceList);
        $this->assertSame($expectedParams['title'], $priceList->getTitle());
        $this->assertSame($expectedParams['description'], $priceList->getDescription());
    }

    /**
     * @throws CommonException
     * @throws \Common\Exceptions\CommonException
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function testExceptionDuplicateTitle()
    {
        $this->createPriceList('PriceList');
        $priceListModel = $this->createPriceListModel('PriceList');

        $this->expectException(CommonException::class);
        $this->priceListService->createOutgoingPriceList($priceListModel);

    }
    /**
     * @throws CommonException
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     * @throws \Runple\Devtools\Exception\CommonException
     */
    public function testCreatePriceListImage()
    {
        $title = 'Price list with a image';
        $description = 'Price list with a image';
        $image = $this->createPriceListImageModel();
        $priceListModel = $this->createPriceListModel($title, $description, $image);
        $priceList = $this->priceListService->createOutgoingPriceList($priceListModel);
        $this->assertInstanceOf(PriceListEntity::class, $priceList);
        $this->assertSame($title, $priceList->getTitle());
        $this->assertSame($description, $priceList->getDescription());
        $this->assertEquals($image->getId(), $priceList->getImage()->getId());
    }

    /**
     * @throws CommonException
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     * @throws \Runple\Devtools\Exception\CommonException
     */
    public function testCreatePriceListProduct()
    {
        $title = 'Price list with a product';
        $description = 'Price list with a product';
        $priceListProductModel = $this->createPriceListProduct();
        $priceListModel = $this->createPriceListModel($title, $description, null, $priceListProductModel);
        $priceList = $this->priceListService->createOutgoingPriceList($priceListModel);
        $this->assertInstanceOf(PriceListEntity::class, $priceList);
        $this->assertSame($title, $priceList->getTitle());
        $this->assertSame($description, $priceList->getDescription());
    }

    /**
     * @throws CommonException
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     * @throws \Runple\Devtools\Exception\CommonException
     */
    public function testCreatePriceListAll()
    {
        $title = 'Price list All fields';
        $description = 'Price list fields';
        $image = $this->createPriceListImageModel();
        $priceListProductModel = $this->createPriceListProduct();
        $priceListModel = $this->createPriceListModel($title, $description, $image, $priceListProductModel);
        $priceList = $this->priceListService->createOutgoingPriceList($priceListModel);
        $this->assertInstanceOf(PriceListEntity::class, $priceList);
        $this->assertSame($title, $priceList->getTitle());
        $this->assertSame($description, $priceList->getDescription());
    }
    /**
     * @param string $title
     * @param string|null $description
     * @param ImageModel|null $image
     * @param PriceListProductModel[] $priceListProducts
     * @return PriceListModel
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    private function createPriceListModel(?string $title, string $description = null, ImageModel $image = null, array $priceListProducts = [])
    {
        $priceListModel = new PriceListModel();
        $priceListModel->setTitle($title);
        $priceListModel->setDescription($description);
        $priceListModel->setImage($image);
        $priceListModel->setPriceListProduct($priceListProducts);
        return $priceListModel;
    }

    /**
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    private function createPriceListImageModel()
    {
        $imageEntity = $this->createImage();
        $imageModel = new ImageModel();
        $imageModel->setId($imageEntity->getId());
        return $imageModel;
    }

    /**
     * @return ImageEntity
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    private function createImage()
    {
        $imageEntity = new ImageEntity();
        $imageEntity->setTitle('Image');
        $imageEntity->setUrl64x64('src/image64*64.png');
        $imageEntity->setUrlOriginal('src/image.png');
        $this->em->persist($imageEntity);
        $this->em->flush();
        $this->em->refresh($imageEntity);

        return $imageEntity;
    }
    /**
     * @return PriceListProductModel[]
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    private function createPriceListProduct()
    {
        $arrGProduct = $this->createGeneralProduct();

        $priceListProductModel1 = new PriceListProductModel();
        $priceListProductModel1->setId($arrGProduct[0]->getId());

        $priceListProductModel2 = new PriceListProductModel();
        $priceListProductModel2->setId($arrGProduct[1]->getId());

        $priceListProductModel1 = new PriceListProductModel();
        $priceListProductModel1->setProduct($priceListProductModel1);
        $priceListProductModel1->setPrice(5);
        $priceListProductModel2 = new PriceListProductModel();
        $priceListProductModel2->setProduct($priceListProductModel2);
        $priceListProductModel2->setPrice(11);

        return $priceListProducts = [$priceListProductModel1, $priceListProductModel2];
    }

    /**
     * @return GeneralProductEntity[]
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
//    private function createGeneralProduct()
//    {
//        $family1 = new ProductFamilyEntity();
//        $family1->setTitle('Family 1');
//        $family1->setStatus(FamilyStatuses::STATUS_ACTIVE);
//        $this->em->persist($family1);
//        $this->em->flush();
//        $this->em->refresh($family1);
//
//        $family2 = new ProductFamilyEntity();
//        $family2->setTitle('Family 2');
//        $family2->setStatus(FamilyStatuses::STATUS_ACTIVE);
//        $this->em->persist($family2);
//        $this->em->flush();
//        $this->em->refresh($family2);
//
//        $gProduct1 = new GeneralProductEntity();
//        $gProduct1->setFamily($family1);
//        $this->em->persist($gProduct1);
//        $this->em->flush();
//        $this->em->refresh($gProduct1);
//
//        $gProduct2 = new GeneralProductEntity();
//        $gProduct2->setFamily($family2);
//        $this->em->persist($gProduct2);
//        $this->em->flush();
//        $this->em->refresh($gProduct2);
//
//        return $arrGProduct = [$gProduct1, $gProduct2];
//    }

    /**
     * @param string $title
     * @param string|null $description
     * @param ImageEntity|null $image
     * @param Collection|null $priceListProducts
     * @return PriceListEntity
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    private function createPriceList(string $title, string $description = null, ImageEntity $image  = null, Collection $priceListProducts = null)
    {
        $priceList = new PriceListEntity();
        $priceList->setTitle($title);
        $priceList->setDescription($description);
        $priceList->setImage($image);
        $priceList->setStatus(PriceListStatuses::ACTIVE);
        $priceList->setType(PriceListTypes::OPL);
        $priceList->setPriceListProduct($priceListProducts);
        $this->em->persist($priceList);
        $this->em->flush();
        $this->em->refresh($priceList);

        return $priceList;
    }
}
